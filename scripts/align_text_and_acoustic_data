#!/usr/bin/env python

import argparse
import pandas as pd

parser = argparse.ArgumentParser()

parser.add_argument(
    "input_tsv",
    help="Input TSV with utterances from Zoom .vtt transcript",
)

parser.add_argument(
    "input_csv", help="Input CSV of acoustic features generated by OpenSMILE"
)

parser.add_argument(
    "output_tsv",
    help="Output TSV with averaged acoustic features at the utterance level",
)
args = parser.parse_args()


def split_zoom_time(timestamp):
    """
    split the hh:mm:ss.sss zoom timestamps to seconds + ms
    used to calculate start and end of acoustic features
    """
    h, m, s = timestamp.split(":")
    return (float(h) * 60 + float(m)) * 60 + float(s)


# get holder for averaged acoustic items
all_acoustic_items = []

# add the feature file to a dataframe
acoustic_df = pd.read_csv(args.input_csv, sep=";")
acoustic_df = acoustic_df.drop(columns=["name"])

# add column names to holder
col_names = acoustic_df.columns.tolist()
col_names.append("timestart")  # so that we can join dataframes later

# add the corresponding dataframe of utterance info
utt_df = pd.read_table(args.input_tsv)

# ID all rows id df between start and end of an utterace
for i, row in utt_df.iterrows():
    # get the goal start and end time
    start_str = row['timestart']
    end_str = row['timeend']

    start_time = split_zoom_time(start_str)
    end_time = split_zoom_time(end_str)

    # get the portion of the dataframe that is between the start and end times
    this_utterance = acoustic_df[
        acoustic_df["frameTime"].between(start_time, end_time)
    ]

    # use this_utterance as input for gender_classifier.
    # get the mean values of all columns

    this_utt_avgd = this_utterance.mean().tolist()
    this_utt_avgd.append(
        start_str
    )  # add timestart so dataframes can be joined

    # add means to list
    all_acoustic_items.append(this_utt_avgd)

# convert all_acoustic_items to pd dataframe
acoustic = pd.DataFrame(all_acoustic_items, columns=col_names)

# join the dataframes
df = pd.merge(utt_df, acoustic, on="timestart")

# save the joined df as a new TSV
df.to_csv(args.output_tsv, index=False, sep="\t")
