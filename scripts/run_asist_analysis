from tomcat_speech.training_and_evaluation_functions.asist_analysis_functions import *

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--output_filepath",
        help="Path to output file",
        default="output/asist_output.txt",
        nargs="?",
    )
    parser.add_argument(
        "--glove_file",
        help="Path to Glove file",
        default="data/glove.short.300d.punct.txt",
        nargs="?",
    )
    parser.add_argument(
        "--emotion_model",
        help="Path to saved model you would like to use in testing",
        default="data/EMOTION_MODEL_FOR_ASIST_batch100_100hidden_2lyrs_lr0.01.pth",
        nargs="?",
    )
    parser.add_argument(
        "--input_aligned_json",
        help="Input json file(s) to get predictions on",
        nargs="+",
    )

    args = parser.parse_args()

    # the current parameters file is saved as testing_parameters/config.py
    import tomcat_speech.train_and_test_models.testing_parameters.config as params

    all_json = read_in_aligned_json(args.input_aligned_json)

    # IMPORT GLOVE + MAKE GLOVE OBJECT
    glove_dict = make_glove_dict(args.glove_file)
    glove = Glove(glove_dict)

    print("Glove object created")

    prediction_json = get_json_output_of_speech_analysis(
                        all_json,
                        args.emotion_model,
                        glove,
                        params,
                    )

    save_json_predictions(prediction_json, args.output_filepath)